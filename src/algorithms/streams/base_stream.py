from typing import Generator, Union


class BaseStreamAlgorithm:
    """Basic interface for the encoding and decoding XOR-based algorithms.

    The class will return the input text as-is, without performing any modifying
    operations, regardless of the method called.

    This class requires no parameters.
    """
    def stream_values(self, **kwargs) -> Generator[int, Union[int, None], None]:
        """Create an integer generator that yields encoded byte values.

        :param kwargs: Optional parameters for the generator.
        :return: An integer generator.
        """
        next_val = yield
        while True:
            next_val = yield next_val

    def encode(self, text: bytes, **kwargs) -> bytes:
        """Encode the text using an arbitrary stream cipher.

        Encodes each of the bytes of the text using a byte stream generated by
        the stream_values method.

        :param text: The bytes object to encode.
        :param kwargs: See BaseStreamAlgorithm.
        :return: The encoded text, as a bytes object.
        """
        sv_gen = self.stream_values(**kwargs)
        sv_gen.send(None)
        xor_text = bytearray(text)
        for i in range(0, len(xor_text)):
            xor_text[i] = sv_gen.send(xor_text[i])
        return bytes(xor_text)

    def decode(self, text: bytes, **kwargs) -> bytes:
        """Decode the text using an arbitrary stream cipher.

        Symmetric operation, see encode() for more information.

        :param text: The bytes object to decode.
        :param kwargs: See BaseStreamAlgorithm.
        :return: The decoded text, as a bytes object.
        """
        return self.encode(text, **kwargs)
